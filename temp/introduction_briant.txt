Introduction

File transfer was deemed as a killer app. File transfer protocols like the FTP helped to move an entire file across 
a network from one computer to another, which was so convenient than transporting the file on a floppy disk or a 
magnetic tape. FTP was oblivious of the file type and allowed directory manipulation as well.

However the drawback of FTP was that, it did not allow file content to be manipulated directly by applications.
One needed to transfer a file in its entirety to a local disk before one can view or change it. The need for file
transfer makes accessing remote data less attractive. One needs to remember which data is local and which is
remote.  A remote file that needs transfer cannot be opened directly by  a program. It must be transferred to the
local disk before it can be viewed and transferred back if it has been modified.

The management of transferred files also can cause problems. One needs to ensure that there is sufficient space
on disk to store the remotely transferred files. After some time, the disk can get cluttered with transferred files
that can be difficult to be managed.

To remove all these problems led to the birth of the File access protocols. File access protocols were designed to
remove the need to transfer the file. The file is manipulated on a remote server in place. File access protocols 
have the below advantages over file transfer protocols.

— You just get what you need. If the client requires only a small piece of the file, then only that needs to be transferred 
unlike the entire file.

— Remote files appear to be local. A remote access protocol makes a remote server files appear as if they are on a local disk.

— No stale data. Since you can access the server data directly, the file data is always up to date.

— Diskless clients: No major requirement on the client side to host large storage.

— No waiting: No need to wait for the entire file to be transferred before the data can be access by the application. 

— File locking: Parts of a file can be locked so as to prevent other clients from obtaining or changing the data.

Seems like file access protocols have huge advantages, but they also have strict hardware requirements.
To make a remote file system appear to be local, the client and the server need a network connection that is 
approximately as fast as the local disk drive connection; otherwise the illusion of a local disk cannot be maintained.
It took Ethernet and Token Ring networks that could move data at 1M bytes/sec to bring the speed of network access close 
enough to that of local SCSI connections for remote access to become practical  
NFS is a remote access protocol. The thing that distinguished NFS from others was its publication as a protocol from which many 
different implementations could be built. The other distributed filesystems of the time were described as implementations.
The other advantage is that NFS advocated for a kernel based client. A kernel based client implementation would be able to 
cache file attributes and data that could be shared across multiple processes.  Also a kernel based client means that there is no
need to relink or recompile. 

NFS was designed as a RPC protocol with high performance and protocol simplicity as its cornerstones. 


