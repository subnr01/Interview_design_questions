

Five silent philosophers sit at a round table with bowls of spaghetti. 
Forks are placed between each pair of adjacent philosophers.


Each philosopher must alternately think and eat. However, a philosopher can only
eat spaghetti when he has both left and right forks. Each fork can be held by
only one philosopher and so a philosopher can use the fork only if it is not
being used by another philosopher. 

After he finishes eating, he needs to put
down both forks so they become available to others. A philosopher can take the
fork on his right or the one on his left as they become available, but cannot
start eating before getting both of them.


The problem is how to design a discipline of behavior (a concurrent algorithm) 
such that each philosopher will not starve



The problem was designed to illustrate the challenges of avoiding deadlock, a
system state in which no progress is possible. To see that a proper solution to
this problem is not obvious, consider a proposal in which each philosopher is
instructed to behave as follows:


-->think until the left fork is available; when it is, pick it up;
-->think until the right fork is available; when it is, pick it up;
-->when both forks are held, eat for a fixed amount of time;
-->then, put the right fork down;
-->then, put the left fork down;
-->repeat from the beginning.


This attempted solution fails because it allows the system to reach a deadlock
state, in which no progress is possible. This is the state in which each
philosopher has picked up the fork to the left, and is waiting for the fork to
the right to become available. With the given instructions, this state can be
reached, and when it is reached, the philosophers will eternally wait for each
other to release a fork.



Solutions:

Resource hierarchy solution
----------------------------

The forks are numbered 1 to 5. The philosophers pick the lower-numbered fork 
first and then the higher numbered fork.


The order in which each philosopher puts down the forks does not matter. 
In this case, if four of the five philosophers simultaneously pick up their 
lower-numbered fork, only the highest numbered fork will remain on the table,
so the fifth philosopher will not be able to pick up any fork. Moreover, 
only one philosopher will have access to that highest-numbered fork, so he 
will be able to eat using two forks.


Arbitrator Solution
----------------------

Here the waiter acts like a mutex.
The philosopher has to get the waiter permission for taking both the forks.
However the philosopher can drop the forks after he is done.
This will result in reduced parallelism.
if a philosopher is eating and one of his neighbors is requesting the forks, 
all other philosophers must wait until this request has been fulfilled even 
if forks for them are still available.


Chandy/Misra Solution
-------------------------
This voilates the protocol that philosophers
are not allowed to send each other any message

1. For every pair of philosophers contending for a resource, 
   create a fork and give it to the philosopher with the lower ID 
   Initially all forks are dirty.
2. Philosopher has to send a request message for obtaining forks from his neighbours.
3. When a philosopher with a fork receives a request message, he keeps the fork if it is clean, 
   but gives it up when it is dirty. If he sends the fork over, he cleans the fork before doing so.
4. After a philosopher is done eating, all his forks become dirty. If another philosopher 
	had previously requested one of the forks, he cleans the fork and sends it.

This solution also allows for a large degree of concurrency.
It also solves the starvation problem. The clean / dirty labels act as 
a way of giving preference to the most "starved" processes, and a disadvantage 
to processes that have just "eaten". One could compare their solution to one 
where philosophers are not allowed to eat twice in a row without letting
others use the forks in between.	

Initializing the system so that philosophers with lower IDs have dirty forks 
ensures the graph is initially acyclic and so no deadlock.

